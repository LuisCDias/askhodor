# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rake db:seed (or created alongside the db with db:setup).
#
# Examples:
#
#   cities = City.create([{ name: 'Chicago' }, { name: 'Copenhagen' }])
#   Mayor.create(name: 'Emanuel', city: cities.first)

Popular.create(name: "JavaScript", percentage: 55.4)
Popular.create(name: "SQL (or SQL Server)", percentage: 49.1)
Popular.create(name: "Java", percentage: 36.3)
Popular.create(name: "C#", percentage: 30.9)
Popular.create(name: "PHP", percentage: 25.9)
Popular.create(name: "Python", percentage: 24.9)
Popular.create(name: "C++", percentage: 19.4)
Popular.create(name: "C", percentage: 15.5)
Popular.create(name: "Node.js", percentage: 17.2)
Popular.create(name: "AngularJS", percentage: 17.9)
Popular.create(name: "Ruby", percentage: 8.9)
Popular.create(name: "Objective-C", percentage: 6.5)

MostWanted.create(name: "Android", percentage: 15.8)
MostWanted.create(name: "Node.js", percentage: 14.8)
MostWanted.create(name: "AngularJS", percentage: 13.4)
MostWanted.create(name: "Python", percentage: 13.3)
MostWanted.create(name: "Javascript", percentage: 11.9)
MostWanted.create(name: "React", percentage: 9.2)
MostWanted.create(name: "Swift", percentage: 8.7)
MostWanted.create(name: "MongoDB", percentage: 8.1)
MostWanted.create(name: "Arduino/Raspberry Pi", percentage: 8.0)
MostWanted.create(name: "C++", percentage: 8.0)
MostWanted.create(name: "iOS", percentage: 8.0)

Trendy.create(name: "React", percentage: 311.3)
Trendy.create(name: "Spark", percentage: 163.5)
Trendy.create(name: "Swift", percentage: 74.6)
Trendy.create(name: "Cassandra", percentage: 40.6)
Trendy.create(name: "Raspberry Pi", percentage: 36.8)
Trendy.create(name: "Node.js", percentage: 26.8)
Trendy.create(name: "Cloud", percentage: 26.0)
Trendy.create(name: "Python", percentage: 19.9)
Trendy.create(name: "Wordpress", percentage: 18.5)
Trendy.create(name: "AngularJS", percentage: 14.9)
Trendy.create(name: "Javascript", percentage: 13.0)
Trendy.create(name: "MongoDB", percentage: 10.6)
Trendy.create(name: "R", percentage: 8.8)
Trendy.create(name: "Redis", percentage: 5.8)
Trendy.create(name: "Hadoop", percentage: 5.2)
Trendy.create(name: "iOS", percentage: 3.1)
Trendy.create(name: "VBA", percentage: 2.5)
Trendy.create(name: "Android", percentage: 2.0)
Trendy.create(name: "Clojure", percentage: 2.0)
Trendy.create(name: "Go", percentage: 1.9)

r1 = Recipe.create(name: "Ruby on Rails Explained for Front End Developers")
r1.content = "<p>As you probably already know if you've downloaded this book, Ruby on Rails is an open source web application framework written in Ruby (<a href=\"https://www.ruby-lang.org\">https://www.ruby-lang.org</a>). It was created by David Heinemeier Hansson (<a href=\"http://en.wikipedia.org/wiki/David_Heinemeier_Hansson\">http://en.wikipedia.org/wiki/David_Heinemeier_Hansson</a>), quickly adopted by the ruby community, and has even come pre-shipped on every new Mac since October 2007.</p>\n\n<p>Rails, much like Ruby, has very strong opinions about what engineering patterns should be in use, and if you're not familiar with those patterns, Rails will be very hard to understand. At the very least, you need to understand the following:</p>\n\n<ul>\n<li><p><strong>Ruby syntax</strong> (<a href=\"https://www.ruby-lang.org/en/documentation/quickstart/\">https://www.ruby-lang.org/en/documentation/quickstart/</a>) This is an obvious one. You need to understand the basic syntax of ruby to understand what the code is doing.</p></li>\n<li><p><strong>Rake</strong> (<a href=\"http://rake.rubyforge.org/\">http://rake.rubyforge.org/</a>) Rake is a build program written in ruby that's similar to unix's <code>make</code>. It's used to automate a lot of tasks that you would normally do by hand.</p></li>\n<li><p><strong>Gems and Bundler</strong> (<a href=\"http://en.wikipedia.org/wiki/RubyGems\">http://en.wikipedia.org/wiki/RubyGems</a> and <a href=\"http://bundler.io/\">http://bundler.io/</a>) Gems are how ruby, and thus rails, manages dependencies. They list dependencies in <code>Gemfile</code> and then use the <code>bundle install</code> command to install all of the dependencies.</p></li>\n<li><p><strong>Object Oriented Programming</strong> (<a href=\"http://en.wikipedia.org/wiki/Object-oriented_programming\">http://en.wikipedia.org/wiki/Object-oriented_programming</a>) Rails consists of classes, many of which inherit from other classes, so you need to understand inheritance and encapsulation at a minimum.</p></li>\n<li><p><strong>MVC</strong> (<a href=\"http://en.wikipedia.org/wiki/Model-view-controller\">http://en.wikipedia.org/wiki/Model-view-controller</a>) The application code that listens for web requests, performs some operations (like manipulating data in a database), and returns a view to the user's browser is, at its core, a model-view-controller framework. Controllers listen to the requests, use models to manipulate data, and respond with a view, usually hydrated with some data from the models. If you've never used an MVC framework before, you'd do well to read up on the pattern and build a few simple practice MVC apps.</p></li>\n<li><p><strong><q>Full Stack Framework</q></strong> You're not just dealing with the browser here -- Ruby on Rails is one of many <q>full stack</q> frameworks, meaning that it provides functionality at every level of the web application stack including persisting data in a database, responding to requests, and dealing with the quirks of browsers in delivering assets (see asset pipeline).</p></li>\n<li><p><strong>Convention Over Configuration</strong> (<a href=\"http://en.wikipedia.org/wiki/Convention_over_configuration\">http://en.wikipedia.org/wiki/Convention_over_configuration</a>) This is one of the biggest patterns that Rails is based on. The idea being that if you have a controller named <q>Blog</q>, a model named <q>Blog</q>, and a view named <q>Blog</q>, the developer shouldn't need to create some configuration file that tells the framework that those objects are related. Convention over configuration is handy in that the framework will make assumptions based on naming conventions and application state, but if you're unaware of the default actions that rails takes when there is no explicit customization, you'll get really confused, really quickly.</p></li>\n<li><p><strong>ERB files</strong> (<a href=\"http://en.wikipedia.org/wiki/ERuby\">http://en.wikipedia.org/wiki/ERuby</a>) HTML files that end in <code>.erb</code> are ran through the ERB processor, which allows for templates to be written with ruby. It's similar to jade and haml, just written in ruby and more powerful. If you're unfamiliar with ERB, the views in rails will look goofy to you.</p></li>\n</ul>\n/n<p><u>Since the intended audience of this book are front end developers, we're going to skip over a lot of the rails structure and cover only the directories and files that the front end dev needs to know about to get his/her content to the browser. If you'd like to read about all of the rails structure, see the rails getting started guide (<a href=\"http://guides.rubyonrails.org/getting\">http://guides.rubyonrails.org/getting</a></u>started.html#creating-a-new-rails-project)._</p>\n\n<p>The core application code (the MVC business) in a rails project is in the <code>app</code> directory:</p>\n\n<ul>\n<li><p><strong><code>app/controllers</code></strong> is where the controllers live in a rails application. Again, the controller is responsible for processing incoming requests by getting necessary data and rendering a view to the user. This is the entry point to behavior in the application.</p></li>\n<li><p><strong><code>app/models</code></strong> is where the models live in a rails application. The models represent an instance of a data type in your application, perform functions unique to that data type, and persist and fetch data from a database.</p></li>\n<li><p><strong><code>app/views</code></strong> is where the HTML views of the application live. They're traditionally written in ERB, but you can use whatever template engine you like (even none at all if you're so brash). You'll be putting your HTML in this directory and a controller that's responding to a request will incorporate your view with the <code>render</code> function (see how controllers and views work together).</p></li>\n<li><p><strong><code>app/assets</code></strong> okay, here's where you'll be doing most of your work. Your javascript files go into the directory named <strong><code>app/assets/javascripts/</code></strong> and your css files go into the <strong><code>app/assets/stylesheets/</code></strong> directory. Also note that just like with views, you can append a filename to your file that tells rails which preprocessor to run your code through before serving it as plan javascript or css. For more on that, see <q>asset pipeline</q>.</p></li>\n</ul>\n\n<hr>\n\n<p>Within <code>app/assets</code>:</p>\n\n<ul>\n<li><p><strong><code>app/assets/images</code></strong> Put all of your images here.</p></li>\n<li><p><strong><code>app/assets/javascripts</code></strong> Your javascript code will be preprocessed, concatenated into files that you specify (the default is <code>application.js</code>), and minified for production by Rail's asset compilation engine, Sprockets (<a href=\"https://github.com/sstephenson/sprockets\">https://github.com/sstephenson/sprockets</a>).</p></li>\n<li><p><strong><code>app/assets/stylesheets</code></strong> is where the default <code>application.css</code> file lives that Sprockets will compile for you.</p></li>\n</ul>\n\n<hr>\n\n<ul>\n<li>\n<strong><code>public</code></strong> is where static pages (like a 404 page), compiled assets (your plain and minified javascript and css after any preprocessors), and other static assets (like images) are placed to be served without any application logic by Apache (<a href=\"http://httpd.apache.org/\">http://httpd.apache.org/</a>) (Rails uses Apache as its web server -- remember that bit about rails being a <q>full stack</q> framework?). The advantage of this is when a request is made for one of these assets, no rails code at all needs to be executed and the web server can simply serve the file back. This lowers stress on the rails application by not having to handle as many requests and makes for faster responses.</li>\n</ul>\n\n<hr>\n\n<p>Within <code>public</code>:</p>\n\n<ul>\n<li>\n<strong><code>public/assets</code></strong> is where Sprockets will place compiled assets (CSS/JS) to be served by the web server. They will not be visible here in development because the Rails server will use Sprockets to compile them on the fly during each request. In production, they are compiled into this directory.</li>\n</ul>\n\n<hr>\n\n<p>Lastly, like any good front-end developer, you'll want to lean on the experience of your peers by using some javascript and css libraries. Simply place those libraries in either <code>vendor/assets/javascripts</code> or <code>vendor/assets/stylesheets</code> and you'll be able to <code>require</code> them in your code in <code>app/assets</code>. Rails (technically Sprockets) will bundle everything up into one javascript or css file, put it in <code>public</code> and you'll be good to go.</p>\n/n<p>Remember that bit about convention over configuration? Well rails definitely prefers configuration to convention in one instance - routes. In the file <code>config/routes.rb</code>, you'll find direction given to the rails router on which controller method to call for a given request. Here's a simple route declaration:</p>\n;;;<p>If a user makes a request to <code>yoursite.com/articles</code>, the rails router will look for a controller called <code>ArticlesController</code> and if there's a method called <code>index</code>, it will call it, passing along the information in the request.&nbsp;</p><p>Then it's up to the controller to respond.</p>/n<p>You'll also see what rails calls <code>resources</code> in the routes file, which promotes the convention over configuration pattern. Resources handle the 85% case where your application is representing standard RESTful CRUD operations on a 'thing', such as an article. The above example route could be replaced with:</p>\n\n\n;;;\n\n<p>which would then mandate that the method names in the matching controller match the rails resourceful actions.</p>\n\n<p><u>(This is the very basic you need to know about routing to be able to do your front end magic. If you want to know more about rails routing, see <a href=\"http://guides.rubyonrails.org/routing.html\">http://guides.rubyonrails.org/routing.html</a>)</u></p>\n/n<p>With the above <code>resources :articles</code> in our routes file, if we have a controller file <code>app/controllers/articles_controller.rb</code> that simply inherits from the default application controller:</p>\n\n\n;;;\n\n<p>and a user makes a request to <code>yoursite.com/articles</code>, then rails will automatically respond with the contents at <code>app/views/articles/index.html.erb</code> because <code>/articles</code> corresponds to the <code>index</code> action.</p>\n\n<p>This is the simplest way to see the controller and view work together, but one feature of rails you'll be using quite frequently is how rails allows you to break up your views into smaller, more maintainable views using layouts and partials.</p>\n/n<p>Rails supports the concept of layouts, which are html files that provide the base skeleton of the page you'd like to return (meta tags, scripts, headers, footers, etc), to which you insert request-specific views.</p>\n\n<p>Rails decides which layout to use by first looking for a layout in <code>app/views/layouts/</code> that has the same name as the controller handling that request. In our <code>/articles</code> running example, rails would look for <code>app/views/layouts/articles.html.erb</code>. If that doesn't exist, then rails will use the application layout, which is traditionally at <code>app/views/layouts/application.html.erb</code>.</p>\n\n<p>You can, however, explicitly declare which layout to use in your controller. For example:</p>\n\n\n;;;\n\n<p>Would use the layout at <code>app/views/layouts/newspaper.index.erb</code> instead of the articles layout.</p>\n/n<p>Writing your layouts is just like writing a plain view, because, well, it is a plain view. Everything you can do in a view, you can do in a layout. However, within a layout you'll probably be using a few rails helpers to incorporate other views.</p>\n\n<h4><strong><code>yield</code></strong></h4>\n\n<p><code>yield</code> declares a point in your layout where the content from a view should be placed. The simplest example is:</p>\n\n\n;;;\n\n<p>which says, <q>when you use this layout to render a view, put the view content inside the `body` tag.</q></p>\n\n<h4><strong><code>content_for</code></strong></h4>\n\n<p>What if you want to insert multiple views into your layout? Then you can name your <code>yield</code> and then use <code>content_for</code> in the view that's going to be inserted to tell rails <q>here's the content for that named yield</q>. Here's an example layout:</p>\n\n\n;;;\n\n<p>and here's the view that would be applied to that layout:</p>\n\n\n;;;\n\n<p>So then rails renders your layout with the above view, it would result in the following html:</p>\n\n/n<p>Rails partials allow you to break your views into smaller chunks and then reuse those chunks anywhere you'd like. Create a view where you want to use a partial, create the partial view, and then use the <code>render</code> function to pull it into the view. For example:</p>\n\n\n;;;\n\n<p>and then in the file <code>app/views/shared/_nav.html.erb</code>:</p>\n\n\n;;;\n\n<p><strong>Notice</strong> the <code>_</code> in the name of the partial file. Underscores are how the rails community differentiates partials from other views, so all partials start with an underscore followed by the name of the partial. When referencing the partial in the <code>render</code> function, you do not include the underscore however.</p>\n\n<p>You can include partials in whatever directory you like, and even render the partial with its own layout, like this:</p>\n\n/n<p>Views are written in plain html. However, rails comes equipped with several helper functions that assist you in including assets and data from your rails application in the view so you don't need to write the actual html for including asset tags in your views.</p>\n\n<ul>\n<li>  <strong><code>javascript_include_tag</code></strong> results in a <code>&lt;script&gt;</code> tag being written to your view with the given source. Assuming you have some javascript in <code>app/assets/javascripts/application.js</code>, you'd include the script like this:</li>\n</ul>\n\n\n;;;\n\n<p>which would then write the following html to your view when a response is rendered:</p>\n\n\n;;;\n\n<ul>\n<li>  <strong><code>stylesheet_link_tag</code></strong> does a similar thing but for your css. Assuming you have a file in <code>app/assets/stylesheets/application.css</code>, you'd write:</li>\n</ul>\n\n\n;;;\n\n<p>which would result in:</p>\n\n\n;;;\n\n<p>The other html attributes in that <code>link</code> tag are rails' defaults, but you can override them with your own parameters:</p>\n\n\n;;;\n\n<p><strong>Note</strong> that with both the <code>javascript_include_tag</code> and the <code>stylesheet_link_tag</code>, you can include external files like so:</p>\n\n\n;;;\n\n<ul>\n<li>  <strong><code>image_tag</code></strong> also allows you to avoid having to write the full html for including an image. Just remember you <strong>need</strong> to include the file extension of the image:</li>\n</ul>\n\n\n;;;\n\n<p>which would result in the following html:</p>\n\n\n;;;\n\n<p><strong>Note</strong> that rails automatically gave your image an <code>alt</code> value - the name of the image minus the file extension and with the first letter in uppercase. You can declare your own <code>alt</code> value, along with any other html attributes as such:</p>\n\n/n<p>Remembering where the actual asset is for you to call it in your view code is a thing of the past with the asset pipeline. Just use the asset helpers above, give it simply the filename of the asset you're looking for, and since the asset pipeline dumps all of the final asset files into <code>public/assets</code>, your html will find the asset file no matter what directory and subdirectories your source files are buried in.</p>\n/n<p>Prefer to write coffeescript instead of javascript? Can't stand regular css so you write sass? That's cool. As long as you include the proper gem for each type of language you want to use and put the proper file extensions on the source file, the asset pipeline will recognize the language you're writing in and automatically run it through that language's interpreter. For instance, I like writing coffeescript over javascript, so in my Gemfile I put:</p>\n\n\n;;;\n\n<p>then write my coffeescript in a file named <code>myscripts.js.coffee</code> and when the asset pipeline goes to produce the minified, production ready javascript code, it sees the file extension as coffeescript and runs it through <code>coffee-rails</code>.</p>\n\n<p>This also works for multiple processors. For instance if you wanted to run your styles through sass and then jade to produce css (because it's Friday and you've had some drinks), then you'd name your file <code>mystyles.css.jade.scss</code>. The asset pipeline processes your source looking at the file extensions from right to left.</p>\n/n<p>As you're surely aware, the browser stores copies of the files it receives from the server in order to very quickly show files to the user when things haven't changed on the server. This is the browser cache. It's very nice when nothing has changed on the server, but what happens when you update some javascript code and want to make sure everyone who visits your site sees the new code, even if they've previously visited your site and have some of your asset files in their browser cache?</p>\n\n<p>Apache (rails' web server) tries to help with this by sending special HTTP headers to the browser (more on this at <a href=\"http://developer.yahoo.com/blogs/ydn/high-performance-sites-rule-3-add-expires-header-7181.html\">http://developer.yahoo.com/blogs/ydn/high-performance-sites-rule-3-add-expires-header-7181.html</a>) if you're interested), but unfortunately, different browsers handle this situation differently. Worst of all, some browsers (<u>ahem, IE</u>) ignore Apache's headers all together and always show the user cached assets so your user will never, ever see the updated version!</p>\n\n<p>The asset pipeline shines here by actually changing the filename of your asset each time you update it so that the browser doesn't know it's actually the same file. The browser thinks you switched out the asset file with a completely different (unrelated and not updated) file, so every browser ignores its cache in that scenario and shows the user your latest and greatest asset.</p>\n\n<p>How? Well when you use the asset helpers above, rails appends the MD5 digest to the filename so that the filename is guaranteed to be different every time you make an edit to that file. For example, if we use the <code>javascript_include_tag</code> helper to include our <code>application.js</code> file in one of our views, rails will actually write:</p>\n\n\n;;;\n\n<p>Rails' default configuration is to use this technique in production and not use it in all other environments. If you'd like to manually enable it in different environments, you can use the following in your <code>config/application.rb</code>:</p>\n\n/n<p>As we said before, rails' asset pipeline will compile assets and put them into the <code>public/assets</code> directory in production mode. Depending on your deployment strategy, you may want to compile these assets locally and the deploy your code to the server, in which case you'd use the rake task <code>rake assets:precompile</code>, which would result in all of your source files getting compiled and placed in <code>public/assets</code>.</p>\n\n<p>In development mode, this compilation doesn't occur ahead of time. It actually happens as you request each asset, allowing for compilation errors to show up at runtime. One thing that trips up even the most experienced rails developers from time to time is the fact that if you're in development mode and you previously compiled your assets to <code>public/assets</code>, the assets in the <code>public</code> directory are always served instead of compiling your new asset on the fly. This results in you making some changes to your javascript or css, refreshing the page, not seeing your changes, and not understanding why your changes aren't showing up. Use the rake task <code>rake assets:cleanup</code> to remove all of the files in <code>public/assets</code> and rails will compile your source files on the fly again and you'll see your changes.</p>\n/n<p>Here's where the controller/model hardcore ruby work that your server buddies do really meets the beautiful html/css/js work that you do. If you get a good grip on how data from rails models is passed to and represented in views, you'll be in the cool kids club.</p><p>Suppose in our articles example above we wanted the main page at <code>mywebsite.com/articles</code> to list all of the articles in our database? We'd have our <code>ArticlesController</code> look something like this:</p>\n;;;<p>Notice that we didn't need to explicitly call <code>render</code> in the <code>index</code> function definition. Since rails follows convention over configuration as much as possible, it will automatically render a view at <code>app/views/articles/index.html.erb</code> if it exists since we're in the articles controller and in the index function. Here's our view:</p>\n;;;<ul><li><strong><code>url_for</code></strong> is a helpful function that you'll most likely become accustomed to using to link to a specific data object. If we wanted to provide some direct link to viewing each article for the purpose of sharing on twitter above, we could use the following:</li></ul>\n;;;<ul><li><strong><code>link_to</code></strong> is another helpful function that allows you to link to an action in the controller, passing along the data that the link is in the context of. For example, we could add the following element in <code>&lt;div class=\"article\"&gt;</code> to give the user the ability to view the individual article:</li></ul>\n;;;<h6>Acknowledgements</h6><p>Thanks to Noah Larsen, Steve Bailey, and Ryan Cook for reviewing and editing early drafts. (@earlatron, @wouldthatiwere, and @cookrn respectively.)</p><p>Also thanks to the terrific Ruby on Rails guides at <a href=\"http://guides.rubyonrails.org/\">http://guides.rubyonrails.org/</a>, where much of the inspiration for this book was taken.</p>"
r1.writer = Writer.create(name: "Miles Matthias")
r1.save

r2 = Recipe.create(name: "Developing an HTML5 Brick-breaker Game With Phaser")
r2.content = "<p><u><strong>Creating a Brick-breaker Game With Phaser</strong></u> is the result of teaching HTML5 game development by example at a local institute, focused on web technologies with a philosophy of <u>teaching concepts, methodologies and standards</u> in a practical way.</p>\n\n<p>This book is intended to be a hands-on introduction to HTML5 game development using the Phaser framework by developing a <em>complete</em> game with well-known mechanics. It is bundled with all the necessary assets, so we can focus on the code and not finding extra resources or developing <q>programmer artwork</q>.</p>\n\\n<p>By the end of the book, you'll have learned to:</p><ul><li>Set up an organized file structure for developing games for the web</li><li>Create a blank game and test everything runs OK</li><li>Import images and sounds</li><li>Show and move sprites on the screen</li><li>Manage a group of sprites</li><li>Play sound effects and background music</li><li>Show text on the screen with custom web fonts</li><li>Handle touch and keyboard input</li><li>Detect collisions and use the Arcade physics system</li><li>How to start using the particle system</li><li>Manage game states</li><li>Create a loading screen</li><li>Optimize the game for mobile devices</li></ul><p>You can play a version of this game on <a href=\"http://pctroll.itch.io/html5-breaker\">itch.io</a>, where you can also find the Android version.</p>\\n\n\n<p>It is aimed to programmers with some experience with JavaScript and want to learn by doing (<em>and finishing</em>). It is not a guide to JavaScript, but each step is explained and the source code is well-commented so you can get it right away and keep focusing on the big picture.</p>\n\n\\n\n\n<p>The Phaser web site has a <a href=\"http://phaser.io/tutorials/getting-started/index\">well-documented section</a> on how to get started. However, I invite you to test and develop the code from this book using the <a href=\"http://brackets.io/\">Brackets</a> editor. The code was developed and tested on it, and works well on Windows, Linux and Mac. Besides, testing the examples is far too easy:</p>\n\n<ol>\n<li>Install Brackets</li>\n<li>Make sure you have Chrome / Chromium browser installed</li>\n<li>In the menu bar, go to <strong><em>File -&gt; Open Folder...</em></strong>\n</li>\n<li>Locate a directory with an <code>index.html</code> file. For example: <code>brick-breaker-phaser/01core_mechanics/01paddle/</code>\n</li>\n<li>Select it</li>\n<li>In the menu bar, go to <strong><em>File -&gt; Live Preview</em></strong>\n</li>\n</ol>\n\n<p>There are other editors and tools, but the coding-testing pipeline on Brackets is very straightforward if you're new to web development.</p>\n\n\\n\n\n<p>The following people helped in the development of this book or the game associated with it:</p>\n\n<ul>\n<li>Richard Davey - creator of Phaser</li>\n<li>Christian Chomiak - editing and title page</li>\n<li>Kenney - artwork and some sound effects</li>\n<li>Joe Powell, courtesy of Freesound - background music (Electric Air)</li>\n<li>Sergio Marin, and the whole team at <a href=\"https://www.escuelaweb.net/\">Escuela Web</a>, for giving me a place to unite two of my passions; game development and teaching</li>\n<li>Luis Miguel Delgado - content review</li>\n<li>Ángel León - technical review</li>\n</ul>\n\\n\n\n<p>This chapter is focused on organizing our project to keep a tidy file structure. It will allow us to get a good start, and test the installation of Phaser. It is worth mentioning that we'll be using Phaser v2.3, <a href=\"https://github.com/photonstorm/phaser/releases/download/v2.3.0/phaser.min.js\">available here for download</a>.</p>\n\n\\n\n\n<ol>\n<li>\n<p>Create the following file structure: an empty <code>index.html</code> file and four additional directories; <code>css</code>, <code>img</code>, <code>js</code>, and <code>snd</code>, respectively. As we can see, it's a standard file structure for web development. As games grow, teams tend to specialize the file structure but right now it's not our case:</p>\n\n<pre><code>game\n|   index.html\n+---css\n+---img\n+---js\n\\---snd\n</code></pre>\n</li>\n<li>\n<p>Add the phaser <code>.js</code> file in the <code>js/</code> directory. Here we will store all of our scripting files:</p>\n\n<pre><code>+---js\n|       phaser.min.js\n</code></pre>\n</li>\n<li><p>Modify the <code>index.html</code> with the following code. This declares the type of document, its character encoding, includes the <code>phaser.js</code> file in the html, and creates a place for the game to be rendered:</p></li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Create a file named <code>main.js</code> in the  corresponding directory. This file will store the initialization code of our game:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Now include the previous file into the html file with the proper <code>&lt;script&gt;</code> tag. It must be included <em>below</em> the phaser include:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>\n<p>Finally, test the game by running it in the browser.  If we open the browser's JavaScript console, we can read a message from the Phaser API stating that it is initialized and everything runs smoothly.</p>\n\n<p><img src=\"https://codeplaceepubsassets.s3.amazonaws.com/311-6540501682-00_empty_game.png\" alt=\"Phaser output message\"></p>\n</li>\n</ol>\n\n\\n\n\n<p>Now that we know how to set up an empty Phaser project, I can tell you that inside the downloadable content there is a directory called <code>00empty_game</code> with the previous code, <em>plus</em> all the images and sounds that we will use to build our game.</p>\n\n<p>In case you're getting the book from Amazon, you can download the at: <a href=\"http://jorge.palacios.co/brick-breaker-book-resources/\">http://jorge.palacios.co/brick-breaker-book-resources/</a></p>\n\n<p>In the following chapters we will build our game, starting from the core mechanics. </p>\n\n\\n\n\n<p>This is the base chapter where most of the magic will happen, and that's because gameplay is the most important thing in our game (at least in the beginning). We will learn how to build our core mechanics progressively, starting with the paddle and user input, and finishing with collisions and high-level rules.</p>\n\n<p>Also, we'll learn the basics of handling game states but only for the purpose of coding the gameplay screen. How to handle state transitions will be covered in the following chapter.</p>\n\n\\n\n\n<p>Programming the paddle will teach us how to load images and get the user input, simple mouse input (like its position), and check whether a key is pressed.</p>\n\n<ol>\n<li>Create the <code>state_main.js</code> file in the <code>/js</code> directory. This file will hold the code for the state that handles the core mechanics:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Define the <code>preload</code> function. Here we will load all the assets to be used in the game. Right now it's just the paddle sprite, but that will change in the following sections:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Define the <code>create</code> function. This functions runs once and is used for setting up the sprite:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Define the member variables for handling paddle horizontal velocity and previous mouse position. We declare the movement to be 500px/sec and a member variable for storing the mouse position in the previous frame:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Add the paddle sprite on the screen by using the game object's factory. Also,  set its anchor point to the bottom-center and finally create a custom member variable for storing the sprite's half size for future reference:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Call the function for restarting the paddle into its original position (not coded yet):</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Define the <code>update</code> function. It keeps running as long as the browser tab is focused, and here we'll code most of the loop-based and time-based game logic:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Declare and assign the variables for getting keyboard input from the arrow keys:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Assign the paddle position according to the mouse or keyboard input. If the mouse hasn't moved (this is why we declared <code>prevX</code>), then we check for keyboard input. It's important to mention that in this game the arrow keys are mutually exclusive:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Assign current mouse position as the previous:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Limit the movement of the paddle to the screen bounds:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Define the <code>resetPaddle</code> function:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Set the paddle's anchor point and place the paddle a little higher than the bottom of the screen:</li>\n</ol>\n\n\n;;;\n\n<p>It's time to link the <code>state_main.js</code> file to <code>index.html</code>:</p>\n\n\n;;;\n\n<p>This is how our <code>index.html</code> file should look like:</p>\n\n\n;;;\n\n<p>Finally, add <code>StateMain</code> to the game object and start the game with it:</p>\n\n\n;;;\n\n<p>By the end of this section, we should have a nice paddle moving along the X axis with the keyboard's arrow keys or following the mouse position.</p>\n\n\\n\n\n<p>Adding the bricks will teach us the basics of Phaser groups. As its name implies, the <code>Group</code> class is used to keep objects referenced in a set and easily change their shared properties (which we will learn in the next section).</p>\n\n<ol>\n<li>Load the bricks' images in the corresponding <code>preload</code> function:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Now, let's move on to the <code>create</code> function and declare the variables for the number of columns and rows:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Create a new empty <em>group</em> of sprites. This is basically a managed array of sprites to help us change shared values and properties easily; most of the time without having to iterate through them:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Declare an array for storing the list of image names for the bricks:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Finally, implement two nested loops in order to set up the brick rows. Take a look on how we place the bricks initially at <code>(0,0)</code> and then use the reference to the newly created sprite in order to change its properties. This will come in handy later when dealing with physics and collisions:</li>\n</ol>\n\n\n;;;\n\n<p>By the end of this section we should be able to see four rows and ten columns of bricks.</p>\n\n\\n\n\n<p>Now we will learn how to <u>get the ball rolling</u>, introducing physics and collisions; the bread and butter of game development. We will also have to tune some other objects in order to work well with the ball, so that's why we will split it into sub-sections in order to better understand each step.</p>\n\n<h3>Setting up</h3>\n\n<ol>\n<li>Load the ball in the preload function:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Create the ball sprite and add a custom member variable for setting its <u><q>shot</q></u> state. The code must be placed <strong>before</strong> calling <code>this.resetPaddle()</code>:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Place the ball on top of the paddle and set the <u>shot</u> state to <code>false</code>, *<em>inside</em> the <code>resetPaddle</code> function: </li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Move the ball according to the paddle's position <strong>inside</strong> the <code>update</code> function, considering its <u>shot</u> state:</li>\n</ol>\n\n\n;;;\n\n<h3>Shooting and basic collision</h3>\n\n<ol>\n<li>Start the physics system to be used, <strong>at the beginning</strong> of the <code>create</code> function:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Enable the physics system on the ball and its rigid body properties for bounding and colliding with the world:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Add two more member variables to the ball for setting its initial velocity:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Create a new function named <code>shootBall</code> and define its behavior. We want to set the rigid-body velocity according to the initial values we created above, randomize whether it shoots right or left, and validate if it has been shot or not:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Enable the shooting via mouse click, at the end of the <code>create</code> function:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Enable the shooting via keyboard, in the <code>update</code> function:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Set the ball's body velocity to 0 in the <code>resetPaddle</code> function:</li>\n</ol>\n\n\n;;;\n\n<h3>Colliding the ball with other objects</h3>\n\n<ol>\n<li>Enable the physics system on the paddle, and also make it immovable to the ball's collision, in the <code>create</code> function:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Enable the physics system on the group of bricks. Notice that there's a little difference between enabling physics on a group and what we previously did with single sprites:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Set the immovable property on the bricks, one by one (inside the <code>for</code> loop):</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Define the collisions in the physics system <strong>at the beginning</strong> of the <code>update</code> function:</li>\n</ol>\n\n\n;;;\n\n<h3>Removing bricks</h3>\n\n<ol>\n<li>Create the function for removing a brick when colliding with the ball.:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Modify the <code>collide</code> function call for calling <code>removeBrick</code> when it checks the collision:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Turn off collisions with the bottom of the world, right after we set up the physics system:</li>\n</ol>\n\n\n;;;\n\n<p>By the end of this section we should have a shooting ball that collides with the paddle and destroys bricks when colliding with them.</p>\n\n\\n\n\n<p>Now we'll learn how to use the TileSprite object in order to create seamless backgrounds and the Text object to include readable content on the screen.</p>\n\n<ol>\n<li>Load the seamless sprites in the <code>create</code> function:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Create the background TileSprite <strong>before</strong> creating the paddle:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Create the black-line TileSprite <strong>after</strong> calling <code>resetPaddle</code>, in the <code>create</code> function. We also want to reuse the previous variables for width and height:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Create a new file called <code>global.js</code> and place the string variables for holding text. The spaces are completely intentional:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Import the <code>global.js</code> file into the html <strong>before</strong> importing any other game code, and <strong>after</strong> importing Phaser:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Create member variables for holding the player's lives and score, in the <code>create</code> function:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Create the text objects <strong>after</strong> including the black-line tile sprite. Start with the one for showing the number of lives:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Add the text object for showing points, only this time we will use a JSON object to configure it:</li>\n</ol>\n\n\n;;;\n\n<p>By the end of this section we should have a seamless starry background and a black line with the number of lives and points.</p>\n\n\\n\n\n<p>Finally, we will implement some additional rules for finishing the gameplay.</p>\n\n<ol>\n<li>Load the audio samples in the <code>preload</code> function:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Create the reference to the samples:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Set the background music to loop and play:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Create a new function to be triggered when the ball collides with the paddle and plays the sound:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Modify the function to check the collision:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Play the sound when the ball is shot, in the <code>shootBall</code> function:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Create a function for losing a life and resetting the paddle:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Enable the ball to check whether it is inside the world bounds, and add an event to call the <code>loseLife</code> function if the ball is out of bounds:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Expand the <code>removeBrick</code> function by adding the following lines:</li>\n</ol>\n\n\n;;;\n\n<p>After improving the gameplay screen it's time to create other states for the next screens, so we have a finished game. This was probably the longest chapter because here lies the basis for the rest of the book.</p>\n\\n\n\n<p>Previously we created our main state which handles the gameplay. Now we will create more states in order to have a little finished game.</p>\n\n<p>In this chapter we will learn about game states, which are commonly referred to as game <em>screens</em>, so to speak. When we talk about main screen, welcome screen, and over screen, we're talking about game states.</p>\n\n<p>We will use the skills from the previous chapter in order to speed up the process, reducing the number of steps and increasing the lines of code per step.</p>\n\n\\n\n\n<p>We will start by creating the introductory screen to welcome the player.</p>\n\n<ol>\n<li>Create a new JavaScript file named <code>state_intro.js</code> inside the <code>js</code> directory</li>\n<li>Include the previously created file in the html:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Define the new state:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Load the background and logo images:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Place the background and logo:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Check if the spacebar is pressed:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Create the function for moving into the next state:</li>\n</ol>\n\n\n;;;\n\n<p>Sometimes the games are embedded into web sites and need an initial click to focus the browser tab/window controls into it. Besides, we want the player to stablish an initial connection by clicking (because it's not common to use spacebar to start a game). That's why we will add a button. The process is similar but we will make use of the spritesheet loader.</p>\n\n<ol>\n<li>Load the button image as a spritesheet. The last parameters are related to the width and height of each spritesheet's frame:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Create the button, binding it to the <code>goToMain</code> function and placing it at the center of the screen:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Finally, modify the <code>main.js</code> file in order to include the new state and start the game with it:</li>\n</ol>\n\n\n;;;\n\n<p>By the end of this section we will have an introductory screen like the one below that changes to the gameplay screen after clicking the button or pressing spacebar.</p>\n\n\\n\n\n<p>We will now prepare everything to receive the player after removing all the blocks (or failing to do so).</p>\n\n<ol>\n<li>Add a couple of lines in the <strong><code>globals.js</code></strong> file:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Create a new file named <code>state_over.js</code> in the <code>js</code> directory</li>\n<li>Include the file in the html:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Define the body of the state:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Load the background and the button we will use. Note that this is the button for going <strong>back</strong>:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Declare the <code>create</code> function. We will build it later because it's the most extensive one:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Define the <code>update</code> function for going back when pressing spacebar:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Define the function for going back:</li>\n</ol>\n\n\n;;;\n\n<p>Now it's time to build the <code>create</code> function in order to put everything in place.</p>\n\n<ol>\n<li>Declare the variables to hold the number of lives and points:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Include the background tile sprite as before:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Implement the code for creating and placing the button for going back</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Define the text configuration for the <q>*Game Over*</q> message:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Create the <q>*Game Over*</q> text object:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Validate the change of color and text, depending on the number of lives the player arrived with:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Create the text configuration for showing the number of points:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Add the text object for the points:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Add the current state in the <code>main.js</code> file:</li>\n</ol>\n\n\n;;;\n\n<p>If we test the state by starting the game with it, instead of using <code>StateIntro</code>, we will have the screen presented below.</p>\n\n\\n\n\n<p>We will add some rules, so we can transition to the <em>over</em> screen correctly.</p>\n\n<ol>\n<li>Add the function for going to the <em>over</em> state. Look how we make use of JavaScript in order to add new member variables to the Game object. This helps us in passing values between states without creating new global variables:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Add the following validation <strong>at the end</strong> of the <code>removeBrick</code> function. The <code>countLiving</code> function (part of the Group object) helps us in counting the number of bricks alive:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Implement the validation for when the player runs out of lives, <strong>at the end</strong> of the <code>loseLife</code> function:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Go to the <code>state_over.js</code> file and change the following lines at the beginning of the <code>create</code> function:</li>\n</ol>\n\n\n;;;\n\n<p>We have completed a basic game with Phaser. *<em>Congratulations!!</em></p>\n\n<p>In the next chapter we will polish it a little bit more, but now we can show our friends the game and enjoy the results of our work.</p>\n\\n<blockquote><p><em>The first 90 percent of the code accounts for the first 90 percent of the development time. The remaining 10 percent of the code accounts for the other 90 percent of the development time</em>.</p></blockquote><p>-Tom Cargill</p><p>Like almost every game, our current game has some things we could polish before releasing it to the world.</p><p>In this chapter we will make some changes, as well as learning a couple of extra things about Phaser in order to improve the game. Let's start right away!</p>\\n\n\n<p>We will animate the tile-sprite background in the introductory screen and play a win/lose sound in the final screen</p>\n\n<ol>\n<li>Increment the <code>tilePosition</code> member of the <code>this.bgk</code> member variable in order to animate the seamless background in the <code>update</code> function of the <code>state_intro.js</code> file. We could also use the same technique in <code>state_main.js</code>:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Load the following audio sample in the <code>state_main.js</code> file:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Also, add the reference in the <code>create</code> function:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Play the sample in the <code>loseLife</code> function:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Load the following sound samples in <code>state_over.js</code>:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Play one sample or the other in the <code>create</code> function, according to the number of lives:</li>\n</ol>\n\n\n;;;\n\n<p>There are more ideas to improve/change the gameplay. We could change the ball's direction depending on the side of the paddle it collides with, or increasing the ball's vertical speed after hitting more than two bricks in a row. We could also define special-purpose bricks (more resistant bricks, power-up bricks, blockers, etc). There's a wide range of possibilities!</p>\n\n\\n<p>Adding custom fonts is pretty easy and improves the way we show texts in our game</p>\n\n<ol>\n<li> Go to Google fonts website</li>\n<li>\n<p>Search for a font you'd like to use in the game. In our case we'll be using <strong>Overlock</strong> to illustrate the process</p>\n\n<p><img src=\"https://codeplaceepubsassets.s3.amazonaws.com/311-9490908253-3_01_fonts.png\" alt=\"\"></p>\n</li>\n<li>\n<p>Go to the <q><u>quick-use</u></q> section via the little button on the right</p>\n\n<p><img src=\"https://codeplaceepubsassets.s3.amazonaws.com/311-5718684903-3_02_fonts.png\" alt=\"\"></p>\n</li>\n<li><p>Add the JavaScript code shown into our html file <strong>after</strong> the <code>title</code> tag. For the Overlock font it would be the following:</p></li>\n</ol>\n\n\n;;;\n\n<ol>\n<li> Change all the <code>sans-serif</code> text to <code>Overlock</code>\n</li>\n</ol>\n\n<p>After selecting and including the font, we will be able to have a new font face in our game.</p>\n\n\\n\n\n<p>We want to celebrate the player's victory by placing a particle emitter in order to create some fireworks for the player who removes all the blocks</p>\n\n<ol>\n<li>Load the fireworks' image and sound sample in <code>state_over.js</code>:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Create the sample's reference in the <code>create</code> function:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Create and set up the particle emitter for the fireworks:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Add a couple of member variables to set up the fireworks' timer:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Place the following line at the end of the <code>update</code> function:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Create the fireworks validation and placement <strong>after</strong> the previous validation:</li>\n</ol>\n\n\n;;;\n\n<p>We have improved the reward for those players who survived until the end!</p>\n\n\\n<p>Let's face it, we're aiming for the web and despite this being a little game, we will probably make something more elaborate in the future. Besides, there are players from underdeveloped countries with slow connections (because I'm one of them). That's why we'll learn how to create a load screen.</p><ol><li>Create two new files; <code>state_init.js</code> and <code>state_load.js</code></li><li>Include them in the html file</li></ol>\n;;;<ol><li>Build the <code>state_init.js</code> file. This state just loads the images for creating the load bar:</li></ol>\n;;;\n\n<ol>\n<li>Start building the <code>state_load.js</code> file:</li>\n</ol>\n\n\n;;;<ol><li>Declare the <code>preload</code> function. The following four steps are to be coded <strong>inside</strong> the <code>preload</code> function:</li></ol>\n;;;\n\n<ol>\n<li>Create and place the background of the loading bar:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Create and place the foreground of the loading bar:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Set the foreground image as the preloading sprite:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Move <strong>ALL</strong> the asset-loading sentences here, from the <code>preload</code> functions in <code>state_main.js</code> and <code>state_over.js</code>. Don't touch the previously created <em>init</em> file:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Implement the <code>create</code> function for moving onto the intro screen:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Add the previously created files in <code>main.js</code>:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Finally, set the initial state to <code>StateInit</code>:</li>\n</ol>\n\n\n;;;\n\n<p>This is an important feature if we don't want our players to believe that our game is broken when they have slow connections.</p>\n\n\\n\n\n<p>Right now a lot of players don't come from personal computers, but from mobile devices. We're now going to implement the changes to support mobile devices <strong>fullscreen</strong>.</p>\n\n<ol>\n<li>Add the following tags in the html <strong>after</strong> the title tag:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Modify the body of the <code>create</code> function in <code>state_init.js</code>. We are using some Phaser capabilites for modifying canvas in order to adjust the resolution and center the game in the browser:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Move to <code>state_main.js</code> in order to make additional changes</li>\n<li>Create new variables for handling touch movement, in the <code>create</code> function:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Implement the routine for handling the touch movement, in the <code>update</code> function <strong>after</strong> the routine for handling input:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Implement a new function to be triggered when click/touch is down:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Implement a new function to be triggered when click/touch is up:</li>\n</ol>\n\n\n;;;\n\n<ol>\n<li>Modify the code for detecting click/touch and add the code for detecting click/touch release, near the end of the <code>create</code> function:</li>\n</ol>\n\n\\n\n\n<p>Now that we have our finished game, it's time to go out there and show it to the world. I know a couple of places to host the game freely: <a href=\"http://itch.io/\">itch.io</a> and <a href=\"http://gamejolt.com/\">GameJolt</a>. The process of creating an account and uploading the game is beyond the reach of this book, but it's very easy in both cases.  </p>\n\n<p>The process of uploading the game to these sites is very easy and it consists of taking every file in the root directory (the one with <code>index.html</code>), <em>zipping</em> them, and uploading the <code>zip</code> file. </p>\n\n\n;;;\n\n<p>That's it, we made it!!!</p>\n\n<p>We now have a polished game that displays  on mobile devices, works on slow connections and a couple more features. It feels really great, doesn't it? Let's go to the next chapter to wrap-up everything and release our game.</p>\n\\n\n\n\n\n<p>Congratulations for reaching this far and completing the game. They say that <em><q>releasing is a feature</q></em> and you have just released a game. How does it feel?</p>\n\n<p>Now you have the skills to start making, <strong>and finishing</strong>, your own games by following a similar pipeline to the one we learned here:</p>\n\n<ol>\n<li>Create the core gameplay</li>\n<li>Implement the basic screens: <em>beginning, middle, end</em>, as if we're telling a story</li>\n<li>Polish (or cut corners)</li>\n<li>Release!</li>\n</ol>\n\n\\n\n\n<p>There are game jams every now and then to take ideas from in order to define a theme and set a deadline. These are just a couple of sites that I love:</p>\n\n<p><a href=\"http://compohub.net/\">CompoHub</a></p>\n\n<ul>\n<li> This is a huge calendar with probably every game jam, competition and development event there is. It's worth checking to see the next events, and get ready to test your skills.</li>\n</ul>\n\n<p><a href=\"http://onegameamonth.com/\">One Game a Month</a></p>\n\n<ul>\n<li> 1GAM is a never-ending game jam to be held each month, each year. The idea is to master our game development skills by submitting 12 games in a year.</li>\n</ul>\n\n\\n\n\n<p>Again, I cannot express how grateful I am you're supporting this book but, most of all, <strong>finishing it</strong>. I'm learning the hard way how to finish and release things (specially games) and it's not as easy as it probably looks. That's why the book is structured the way it is. It took me a lot of time realizing that and I want you to be better, to learn early and release often.</p>\n\n<p>In case you find a mistake (and there could be plenty despite my efforts and the dear friends who proof-read the book), you're more than welcome to contact me via Twitter or email.</p>\n\n<p>You're also welcome to show your support, ask questions or write just about life; I'm a developer and human being like you. By the time of writing the book, I'm focusing my efforts on Unity and HTML5, as well as gameplay and AI programming (besides teaching, of course). I'm open to discuss ideas and say hi back.</p>\n\n<ul>\n<li>Twitter account: <a href=\"\">@pctroll</a>\n</li>\n<li>Web site: <a href=\"http://jorge.palacios.co\">http://jorge.palacios.co</a>\n</li>\n<li>Email: <a href=\"mailto:jorge@palacios.co\">jorge@palacios.co</a>\n</li>\n<li>También hablo Español: <a href=\"http://pctroll.net\">http://pctroll.net</a>\n</li>\n</ul>\n\n<p>Thank you.</p>\n"
r2.writer = Writer.create(name: "Jorge Palacios")

r3 = Recipe.create(name: "Build your first API with Rails and Grape")
r3.content = "<p>In this tutorial we are building a Rest API on top of an existing Rails application. So after we are done we should have 2 ways of interacting with our application: The first is the tradicional way a Rails app works, i.e. via a web browser. The second is a API that can be accessed by external clients like a mobile App, an Angular app or, a third-part website for example.</p><p>For this we are using the Grape gem. Grape is a Rack application that can run on its own, or ride along with web applications like Rails or Sinatra.</p>\\n<p>For this tutorial we have a sample rails app to start with. Clone the project:</p>\n;;;<p>Install dependencies:</p>\n;;;<p>We will be using Paperclip for image uploads, so you must have <a href=\"http://www.imagemagick.org\" target=\"_blank\">Imagemagick</a> installed on your system.</p>\n;;;<p>On Mac OS, install it using <a href=\"http://On Mac OS, install it using Homebrew:\" target=\"_blank\">Homebrew</a>:</p>\n;;;<p>If you are on Debian/Ubuntu:</p>\n;;;<p>Run the app.&nbsp;</p><p>This sample comes with a small <span class=\"\" data-original-title=\"\" title=\"\">Sqlite</span> database already set up, so you don't need to run migrations. Just start it up:</p>\n;;;<p>Go to your browser <span class=\"\" data-concept=\"/select_concept?tech=rails&amp;val=ActiveJob\" data-original-title=\"\" title=\"\">and</span> enter <a href=\"http://localhost:3000\" target=\"_blank\">http://localhost:3000</a>. You should see something like this:</p>\n;;;<p>Go ahead and explore the web app. Try inserting some new manufacturer or vehicle. We will be doing this same operations later via our new Rest API.</p>\\n<p>Add the gem to your Gemfile:</p>\n;;;<p>Now run:</p>\\n<p>The first thing to be defined is the mounting point for our API. Following the best practices, it is recommended that you aways version an API. So we should have something like this:</p><p>&nbsp;<a href=\"http://mydomain.com/api/v1\"></a><a href=\"http://mydomain.com/api/v1\"></a><a href=\"http://mydomain.com/api/v1\">http://mydomain.com/api/v1</a>&nbsp;</p><p>This way, once our API is made available to the public we wont brake compatibility with clients already accessing it. Any edition that alters endpoints should be done in a new version of the API.</p>\n;;;<p>Create the folder structure for the API classes. They will reside at <code>lib/api/v1/</code>.&nbsp;</p>\n;;;<p>Create the main API class:</p>\n;;;<p>The first 2 options declared should be self explanatory. We are telling Grape to mount the API in the path <code>/api/v1/</code>. Then we say that it should respond with <span class=\"\" data-original-title=\"\" title=\"\">JSON</span> format. Grape automatically handles serialization for us.</p>\n;;;<p>We must tell Rails to load our API Classes folder, by adding it to autoload paths:</p>\n;;;<p>Finally, we should declare the mounting point in <code>routes.rb</code>:</p>\n;;;<p>Now if you run <code>rake routes</code> in terminal you will notice something new:</p>\n;;;<p>The resulting code for this section is available <a href=\"https://github.com/fabianoarruda/tutorial-grape-api/tree/a02fe5f6d8bd546fc4fdb765c8062c1b06de9794\" target=\"_blank\">here</a>.</p>\\n<p>Lets create the manufacturers endpoint. We should provide a way to list the records of manufacturers on our application.</p><p>For each model we have on our Rails App we will be creating a separated file for its API endpoint. Go ahead and create a new file named <code>manufacturers.rb</code> inside the folder structure we just created.</p>\n;;;<p>This class will inherit from the <code>Grape::API</code> class.</p>\n;;;<p>Edit the base API class to mount the new endpoint</p>\n;;;<p>Lets check what we have so far. Restart the server and point your browser to <a href=\"http://localhost:3000/api/v1/manufacturers\"></a><a href=\"http://localhost:3000/api/v1/manufacturers\">http://localhost:3000/api/v1/manufacturers</a>.&nbsp;</p><p>You should see a JSON response like this:</p>\n;;;<p>Not much yet, but its working.</p><p>Also, lets use a more appropriate tool to test our API: <a href=\"http://www.getpostman.com/\" target=\"_blank\">Postman</a>. It is available as a Google Chrome extension for any platform, or a native app for Mac.</p>\n;;;<p>Select the method GET, enter the url and hit Send. Now we can see the response with more details, like HTTP Headers and other stuff. Click on 'Pretty' to see the response in a nice formatted shape.</p><p>The resulting code for this section can be seen <a href=\"https://github.com/fabianoarruda/tutorial-grape-api/tree/dd430dd7399d222722f0a21bdacd99415d0eea75\" target=\"_blank\">here</a>.</p>\n;;;<p>Now lets create another GET method, this time for presenting a specific Manufacturer, assuming that a manufacturer's id is provided.</p>\n;;;<p>Go back to Postman and enter the url <a href=\"http://localhost:3000/api/v1/manufacturers/1\">http://localhost:3000/api/v1/manufacturers/1</a></p>\n;;;<p>The resulting code for this section can be found <a href=\"https://github.com/fabianoarruda/tutorial-grape-api/tree/4c90d1cad605d6cfe308cc3aaccc3b4edb54e1e7\" target=\"_blank\">here</a>.</p>\\n<p>What happens if we provide an invalid manufacturer id in the endpoint we crafted earlier? Let's try <a href=\"http://localhost:3000/api/v1/manufacturers/5\">http://localhost:3000/api/v1/manufacturers/5</a></p>\n;;;<p>Notice that the response status changed from \"200 OK\" to \"404 Not Found\". But we raised an Active Record error because such record with id 5 doesn't exist. This causes Rails to respond with HTML content, i.e. the standard Rails error page. Our API must handle this kind of error and respond in JSON instead. Let's fix this.</p>\n;;;<p>Open our API base class and add this:</p>\n;;;<p>Basically we are telling Rails to rescue whenever an error <code>ActiveRecord::RecordNotFound</code> happens; we intercept it and send a nice formatted JSON response with the <code>rack_response</code> method.</p><p>By inserting this code in the Base class we are making sure that all endpoints of our API will be covered, as they will inherit from it.</p><p>That's better:</p>\n;;;<p>We should also handle some other unexpected errors. For example let's say our database goes down. In production environment Rails would raise an error and send to the client the default HTML page for Error 500 (Internal server error). Let's handle that too:&nbsp;</p>\n;;;<p>What is happening here?</p><p>Early we were telling Rails to rescue from a specific error. After that in line 13 we are saying that anything else, whatever the error is, should be rescued also. We pass <code>:all</code> as parameter, and the variable <code>exception</code> passed in the block will receive the error contents.&nbsp;</p><p>Then we proceed concatenating the error message and the backtrace, to be added to the logger. For the client we wont be passing any details of the error of course, but just a generic error 500 message.</p><p>As a result any unexpected error will return this nice and clean JSON to the client.</p>\n;;;<p>The resulting code for this section can be found <a href=\"https://github.com/fabianoarruda/tutorial-grape-api/tree/6b42de4ccb54d6d9fff7948c59a52937a8cb90f8\" target=\"_blank\">here</a>.</p>\\n<p>Let's create the Vehicles endpoint. Besides getting vehicles, we need methods to insert new ones, and also to edit them.</p>\n;;;<p>Create vehicle endpoint class:</p>\n;;;<p>Mount it:</p>\n;;;<p>Open Postman and visit <a href=\"http://localhost:3000/api/v1/vehicles\">http://localhost:3000/api/v1/vehicles</a>&nbsp;<a href=\"http://localhost:3000/api/v1/vehicles\"></a></p>\n;;;<p>It works, but the outputs can be greatly improved. There is a lot on data that don't need to be there. We will fix that in the next section.</p><p>The resulting code for this section can be found <a href=\"https://github.com/fabianoarruda/tutorial-grape-api/tree/19bfbd521d4c0a48e05a6b86975165a37f4b02d2\" target=\"_blank\">here</a>.</p>\\n<p>We need to improve the output of our GET method. As we saw in the last section, there is a lot of data we don't need to expose via the API, like the image attributes created by Paperclip, and the timestamps.</p>\n;;;<p>We should use the gem <a href=\"https://github.com/ruby-grape/grape-entity\" target=\"_blank\">grape-entity</a>, which allow us to have more advanced options when presenting our data. add the gem to your Gemfile and run <code>bundle install</code> again.</p>\n;;;<p>Create a new file called <code>entities.rb</code>.</p>\n;;;<p>We just created our first Entity. You do that by declaring a class, usually with the same name of the Model we want to expose, and making it inherit from <code>Grape::Entity</code>. Then you declare only the attributes you want exposed, with the option <code>expose</code>.</p><p>Now back in the <code>vehicles.rb</code> file, we will use this Entity to present the model. Use the option <code>with</code> and pass to it an Entity we declared before:</p>\n;;;<p>We can make more improvements. First lets make adjustments to manufacturer also.</p>\n;;;<p>As you can see, you can have nested Entities. The result is this:</p>\n;;;<p>We can go further and do 2 more things. First we can expose the date the vehicle was created in our catalog.</p>\n;;;<p>Here we are using the <code>format_with</code> helper, that allow us to create a custom format for attributes. It takes a block which is passed as the value of the exposed attribute. We are just taking created_at attribute and formatting it to be more readable. Lastly, we call the <code>expose</code> method in conjunction with our formatter, identified as <code>timestamp</code>.&nbsp;</p>\n;;;<p>Second, we can expose the image url:</p>\n;;;<p>Paperclip only provides a relative path for the image, so we must complete the rest so it can become an absolute path. With <code>opts[:env]['HTTP_HOST']</code> we catch the host according to the environment. For example, when running on development, it will be <em>localhost:3000</em>.</p>\n;;;<p>The resulting code for this section can be found <a href=\"https://github.com/fabianoarruda/tutorial-grape-api/tree/cf732c94f047e94ce0cbea31a1aefac4c8dc95e3\" target=\"_blank\">here</a>.</p>\\n<p>We need a way to insert new vehicles in our catalog. Lets make a new POST method.</p>\n;;;<p>In the <code>params</code> block we are declaring 3 required params and 1 optional. We are also validating the type of each param. Then we define a post block. It will receive the request, and inside it we create a new vehicle object, save it and respond whit the object we just created.</p>\n;;;<p>There is one more thing we need for it to work though. Add the gem <a href=\"https://github.com/Maxim-Filimonov/hashie-forbidden_attributes\" target=\"_blank\">hashie-forbidden_attributes</a> in <code>Gemfile</code> and run <code>bundle install</code> again. An explanation for why this is needed can be found <a href=\"https://github.com/ruby-grape/grape/issues/553\" target=\"_blank\">here</a>.</p>\n;;;<p>Finally, lets test the insertion of a new Vehicle.&nbsp;</p><p>1. Open Postman, change method to POST and enter the url <a href=\"http://localhost:3000/api/v1/vehicles\"></a><a href=\"http://localhost:3000/api/v1/vehicles\">http://localhost:3000/api/v1/vehicles</a>;</p><p>2. Click in \"Body\" tab, and enter the values as illustrated on the figure bellow;</p><p>3. Go ahead and hit send.&nbsp;</p>\n;;;<p>Notice 2 things here: first the response status 201, meaning the resource was successfully created. Second, The API responded whit the object we just created.</p>\n;;;<p>&nbsp;What happens when any of the required params is not provided in the request? An error will be raised. So we need to rescue from it. Lets add another <code>rescue_from</code> block in ou Base class:</p>\n;;;<p>We use the Grape method <code>error!</code> to respond. It takes 2 arguments: The message and the HTTP response type. Status 400 means 'Bad Request'. Grape automatically adapts the response to the format we declared earlier in line 7 with method <code>format</code>, which is JSON.</p><p>Now, lets see how our API responds to an invalid POST request.&nbsp;</p><p>1. Enter the url <a href=\"http://localhost:3000/api/v1/vehicles\">http://localhost:3000/api/v1/vehicles</a>. Don't forget to use POST;</p><p>2. Click in the Body tab, enter only 'price' as the <code>key</code> and, any <strong>no numeric</strong> text in <code>value</code>. See the example in the image. We want to simulate an invalid price.</p><p>3. Without providing any other attribute, hit send and watch the result.</p>\n;;;<p>As you can see it returned a nice JSON telling what is wrong.</p>\n;;;<p>There is one thing left: the image upload.</p>\n;;;<p>To start, we declare our required image parameter. But before creating our object, we need to manually build the uploaded file passed in params, and attach it later to our vehicle object.&nbsp;</p><p>The result is returned as expected:</p>\n;;;<p>The resulting code for this section can be found <a href=\"https://github.com/fabianoarruda/tutorial-grape-api/tree/821da0da5c2358fdc45a2d03b846068fc703fd73\" target=\"_blank\">here</a>.</p>\\n<p>Making PATCH (for editing a register) and DELETE methods is not much different from what we have done earlier.</p>\n;;;<p>First the PATCH method:</p>\n;;;<p>This is the result of a PATCH request.</p>\n;;;<p>Let's add the DELETE method in the sequence.</p>\n;;;<p>There is just one thing different here. When responding a DELETE request, it is recommended that the server respond with a status code <code>204 No content</code>, and an empty body. Line 73 does just that.</p><p>As aways, we can test it with Postman to see how it look. Change the method to DELETE, accessing the same endpoint <a href=\"http://localhost:3000/api/v1/vehicles/17\">http://localhost:3000/api/v1/vehicles/17</a>.</p>\n;;;<p>The resulting code for this section can be found <a href=\"https://github.com/fabianoarruda/tutorial-grape-api/tree/8fd54fcd5f3120550256400f466a54b0170b5530\" target=\"_blank\">here</a>.</p>\\n<p>Until now we are testing our API making requests from localhost to localhost. The client (Postman) is in the same machine in which our application is runing (rails server). But in the real world an API is likely to receive requests from clients in different domains, i.e a <em>cross-site request</em>. Just to clarify: Cross-site requests are HTTP requests for resources from a different domain than the domain of the resource making the request.&nbsp;</p><p>Due to a security feature, such kind of clients will be blocked by our API by default. However there is a method we can use to make secure cross-site requests, and its called CORS(Cross-Origin Resource Sharing).</p><p>For our convenience, there is a <a href=\"https://github.com/cyu/rack-cors\" target=\"_blank\">gem for that</a>. &nbsp;Let's use it in our application.&nbsp;</p>\n;;;<p>Add the gem to our Gem file and run <code>bundle</code> again.</p>\n;;;<p>Insert this in <code>application.rb</code>:</p>\n;;;<p>Whats happening here?&nbsp;</p><p>First, in line 30 we are accepting requests from any domain over the internet.</p><p>At line 31 we are declaring that any resource is available, and then we allow any headers; &nbsp;finally we declare the methods that are allowed.</p><p>The resulting code for this section can be found <a href=\"https://github.com/fabianoarruda/tutorial-grape-api/tree/f24b29d2012cea1202b82403c4cc85bce315974c\" target=\"_blank\">here</a>.</p>\\n<p>When working with rails applications, there is a very useful command to list all the routes configured in your application. Running the command <code>rake routes</code> we can see all the routes configured in the <code>routes.rb</code> file.&nbsp;</p>\n;;;<p>One thing you will notice though is that, besides the routes for the views, we only see here the mounting point for our API. The complete routes for the endpoints are missing.</p><p>We can easily fix that by customizing the routes task. Create a new file under tasks named <code>routes.rake</code>.</p>\n;;;<p>We just created another routes task under api namespace. This task will list all routes &nbsp;under the API.</p><p>Now, run the command <code>rake api:routes</code> and watch the output:</p>\n;;;\n\n<p>The resulting code for this section can be found <a href=\"https://github.com/fabianoarruda/tutorial-grape-api/tree/11047ceb341d88fc5ffd48a76ed579aad99ab3e1\">here</a>.</p>\n"
r3.writer = Writer.create(name: "Fabiano Arruda")

r4 = Recipe.create(name: "Using MongoDB with Rails")
r4.content = "<p>In this lesson, we are going to create a Rails app to play around with using MongoDB as a database.</p><p><br></p><p>It is going to be a simple book reference application.</p>\r\n\\n<p>The first step of every Rails application is to generate it. This is exactly, what this lecture is about.</p>\n;;;<p>First you want to generate a new Rails application without ActiveRecord. The name will be&nbsp;<strong>mongorail</strong>.</p>\n;;;<p>Change to the application's directory to start using it.</p>\\nThis is this section introductory text. You must provide a good summary of the content of the section. Only text input is allowed.\n;;;<p>Add the <strong>mongoid</strong> gem to the &nbsp;<code>Gemfile</code>&nbsp;.</p>\n;;;<p>After adding the&nbsp;<code>Gemfile</code>&nbsp; you have to run bundler to install your added gems.</p>\n;;;<p>You have to create the necessary configuration files for connecting to the database, much like &nbsp;<code>database.yml</code>&nbsp;&nbsp;in ActiveRecord.</p>\\n<p>Twitter Bootstrap is a quick and easy way to style your application. We are going to use it in this recipe as well.</p>\n;;;<p>Change your &nbsp;<code>application.html.erb</code>&nbsp;&nbsp;layout file to add the includes from <a href=\"http://getbootstrap.com/getting-started/\" target=\"_blank\" rel=\"nofollow\">Bootstrap's Getting Started</a> page. In the same step, wrap the&nbsp;<code>yield</code>&nbsp; &nbsp;call in a container div.</p>\\n<p>While MongoDB is a schemaless database, that is organized around documents, it doesn't mean, you don't need a data model in your Rails application. Most of your objects you are going to store have a certain schema. The only difference is, we don't have to run migrations if we add or remove fields.</p>\n;;;<p>Create the&nbsp;<code>Book</code>&nbsp; model by running the Rails generator. The book has the following attributes:</p><p><br></p><ul><li>title <em>(String)</em>&nbsp;– The title of the book</li><li>isbn <em>(String)</em> – The 13 digit ISBN of the book</li><li>abstract <em>(String)</em>&nbsp;– A short description about the books contents</li><li>pages <em>(Integer)</em>&nbsp;– The number of pages of the book</li><li>price <em>(Float)</em>&nbsp;– The price of the book</li><li>released_at <em>(Date)</em>&nbsp;– The release date of the book</li></ul><p><br></p><p>Don't forget to add the&nbsp;&nbsp;<code>--no-stylesheets</code>&nbsp;&nbsp;option to avoid a SCSS file from being created.</p>\n;;;<p>When you look at the generated model file, you can see how fields are defined in Mongoid.</p>\n;;;<p>A model doesn't inherit from any class. It is a plain old Ruby class, that includes the &nbsp;<code>Mongoid::Document</code>&nbsp;&nbsp;module. It is a concern, that extends the class to be used to interact with MongoDB.</p><p><br></p><p>The schema is defined by the &nbsp;<code>field</code>&nbsp;&nbsp;method, that needs the attribute name and a hash with the type (that defaults to &nbsp;<code>String</code>&nbsp;) &nbsp;as arguments.</p><p><br></p><p>Fields can have a number of native Ruby data types, including&nbsp;<code>Array</code>&nbsp;,&nbsp;<code>Hash</code>&nbsp; or &nbsp;<code>Range</code>&nbsp;. You can find a full list of supported fields in the <a href=\"https://docs.mongodb.org/ecosystem/tutorial/ruby-mongoid-tutorial/#fields\" rel=\"nofollow\" target=\"_blank\">Mongoid</a><a href=\"https://docs.mongodb.org/ecosystem/tutorial/ruby-mongoid-tutorial/#fields\" rel=\"nofollow\"> documentation</a>.</p>\\n<p>Normally inheritance in Rails is quite a pain. When using MongoDB it is very easy and convenient. Since you don't have a schema, you don't have to worry about the restrictions of STI (Single Table Inheritance).</p>\n;;;<p>Manually create a new&nbsp;<code>ChildrensBook</code>&nbsp; model.</p>\n;;;<p>A children's book just uses object inheritance to be a sub-model of &nbsp;<code>Book</code>&nbsp;. It gets stored in the same collection, but can be queried either separately or together.</p>\n;;;<p>Change the &nbsp;<code>BooksController</code>&nbsp;&nbsp;to explicitly query for &nbsp;<code>ChildrensBook</code>&nbsp;&nbsp;items.</p>\n;;;<p>Change the &nbsp;<code>books/index</code>&nbsp;&nbsp;page to have a separate section for children's books.</p><p><br></p><p>Also change the paths, of the Show and Destroy links to point to &nbsp;<code>book_path(book)</code>&nbsp;.</p>\n;;;<p>Using the Rails console, create a children's book.</p>\\n<p>Of course each book has an author. We want to store this in a separate document and associate the books to the author object.</p>\n;;;<p>First, scaffold the &nbsp;<code>Author</code>&nbsp;&nbsp;resource.</p>\n;;;<p>Associate the &nbsp;<code>Author</code>&nbsp;model with the&nbsp;<code>Book</code>&nbsp;model using a &nbsp;<strong>one-to-many relationship</strong>.</p>\n;;;<p>Since the two models are now connected we can change the views to reflect this. Change the &nbsp;<code>book/index</code>&nbsp;&nbsp;and &nbsp;<code>book/show</code>&nbsp;&nbsp;pages to show the author.</p>\n;;;<p>Change the book's form to be able to select an author during creation and editing.</p>\n;;;<p>To avoid hitting the database for on the&nbsp;&nbsp;<code>books/index</code>&nbsp;page&nbsp;for every author (which is referred to as the N+1 problem), change the&nbsp;<code>BooksController</code>&nbsp; to eager load the authors.</p>\n;;;<p>On the author's page, we can also display all the books he's written. Change the &nbsp;<code>authors/show</code>&nbsp;&nbsp;page to include this information.</p>\\n<p>Mongoid has a query language, that is similar to JavaScript. It also takes a lot of programming patterns out of there. One of those patterns is <strong>MapReduce</strong>, an algorithmn where you first map the interesting values to a key, and then reduce those values to one value per key.</p>\n;;;<p>Create the map/reduce functions in the &nbsp;<code>AuthorsController</code>&nbsp;'s&nbsp;<code>index</code>&nbsp; method.</p>\n;;;<p>This will go through each book in the database, and in the map function, extract the number of pages and associate it with the author if there is one. The reduce function will count all pages for each author together and also count the number of books up by one.</p>\n;;;<p>Change the &nbsp;<code>authors/index</code>&nbsp;&nbsp;page to include the total number of books and pages for each author.</p><p><br></p><p>In the same step, change the table's classes to use Bootstrap CSS.</p>\\n<p>In MongoDB the context of embedding data into a documehnt exists. You can think of it as a sub-document of sorts. This means, that is tightly coupled to its associated document, and can't be queried without knowing its parent. This makes sense, when an object can't exist without its association (like reviews of a book need the book to exist).</p>\n;;;<p>Scaffold the &nbsp;<code>Review</code>&nbsp;&nbsp;model.</p>\n;;;<p>Change the&nbsp;<code>Review</code>&nbsp; model to reflect its association with&nbsp;<code>Book</code>&nbsp;. Additionally, add the &nbsp;<code>Mongoid::Timestamps</code>&nbsp;&nbsp;concern, to enable the use of&nbsp;<code>created_at</code>&nbsp; and&nbsp;<code>updated_at</code>&nbsp;.</p>\n;;;<p>Change the&nbsp;<code>Book</code>&nbsp; model to reflect its association with &nbsp;<code>Review</code>&nbsp; and add an order condition, so that the newest reviews will be first in the list.</p>\n;;;<p>Now that the association is made, we can work on the controller and views to reflect this relationship in the user interface.</p><p><br></p><p>First let's show a listing of the reviews on the &nbsp;<code>books/show</code>&nbsp;&nbsp;page. It loops through all reviews and shows them.</p>\n;;;<p>The reviews all feature a score, which can be used to display an average score on the &nbsp;<code>books/index</code>&nbsp;&nbsp;page. This can be done using standard Rails aggregates.</p>\n;;;<p>Right now displaying the reviews should work fine, but we can't really test it, since there is no way to add new reviews through the user interface.</p><p><br></p><p>Create a new partial for the &nbsp;<code>Review</code>&nbsp;&nbsp;form.</p>\n;;;<p>Create a ReviewsController, that is responsible for creating the reviews. It only has one action: &nbsp;<code>create</code>&nbsp;.</p>\n;;;<p>Also change your routes.rb file to include the reviews resource.</p>\n;;;<p>Finally enable the form on the &nbsp;<code>books/show</code>&nbsp;&nbsp;page above the other reviews.</p>"
r4.writer = Writer.create(name: "Stuk.io")

r1.save
r2.save
r3.save
r4.save
